User Grid ts -->
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Component, OnInit, ViewChild } from '@angular/core';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIcon } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import { MatSort, MatSortModule } from '@angular/material/sort';
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import { MatDialog } from '@angular/material/dialog';
import { EdituserboxComponent } from '../../EditComponents/edituserbox/edituserbox.component';
import { MatButtonModule } from '@angular/material/button';

@Component({
  selector: 'app-usersgrid',
  standalone: true,
  imports: [
    MatIcon, HttpClientModule, CommonModule,
    MatPaginator, MatPaginatorModule,
    MatInputModule, MatTableModule,
    MatSort, MatSortModule,
    MatFormFieldModule,MatButtonModule
  ],
  templateUrl: './usersgrid.component.html',
  styleUrls: ['./usersgrid.component.css'] // âœ… Fixed here
})
export class UsersgridComponent implements OnInit {

  displayedColumns: string[] = ['id','email', 'password', 'actions'];
  dataSource = new MatTableDataSource<any>();
  filterValue: string = '';

  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(private http: HttpClient, private dialog: MatDialog) {}

  ngOnInit(): void {
    this.refreshData();
  }

  // Filter method
  applyFilter(): void {
    this.dataSource.filter = this.filterValue.trim().toLocaleLowerCase();
  }

  // Set paginator and sorting
  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  // Open edit dialog
  openEditDialog(user: any): void {
    const dialogRef = this.dialog.open(EdituserboxComponent, {
      width: '400px',
      data: { ...user },
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.updateUser(result);
      }
    });
  }

  // Update user API
  updateUser(user: any): void {
    this.http.put(`https://localhost:7033/api/Login/update/${user.id}`, user)
      .subscribe(response => {
        console.log('User updated:', response);
        this.refreshData();
      });
  }

  // Delete user API
  deleteUser(user: any): void {
    this.http.delete(`https://localhost:7033/api/Login/delete/${user.id}`)
      .subscribe(response => {
        console.log('User deleted:', response);
        this.refreshData();
      });
  }

  // Refresh the user grid data
  refreshData(): void {
    this.http.get<any[]>('https://localhost:7033/api/Login/users')
      .subscribe(data => {
        this.dataSource.data = data;
      });
  }
}

User Grid html -->
<div class="mat-elevation-z8">
  <table mat-table [dataSource]="dataSource" matSort class="full-width-table">
    <ng-container matColumnDef="id">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>
    <td mat-cell *matCellDef="let user">{{ user.id }}</td>
    </ng-container>
    <ng-container matColumnDef="email">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>
      <td mat-cell *matCellDef="let user">{{ user.email }}</td>
    </ng-container>

    <ng-container matColumnDef="password">
      <th mat-header-cell *matHeaderCellDef>Password</th>
      <td mat-cell *matCellDef="let user">{{ user.password }}</td>
    </ng-container>

    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>Actions</th>
      <td mat-cell *matCellDef="let user">
        <button mat-icon-button color="primary" (click)="openEditDialog(user)">
          <mat-icon>edit</mat-icon>
        </button>
        <button mat-icon-button color="warn" (click)="deleteUser(user)">
          <mat-icon>delete</mat-icon>
        </button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>

  <mat-paginator [pageSize]="5" [pageSizeOptions]="[5, 10, 20]" showFirstLastButtons></mat-paginator>
</div>


CSS -->
table {
    width: 100%;
    margin-right: 4rem;
}

.mat-elevation-z8{
    margin-top: 2rem;
    width: 80%;
    align-items: center;
    justify-content: center;
    margin-left: 2rem;
}


EdituserboxComponent.ts -->
import { Component,Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';
import { CommonModule } from '@angular/common';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
@Component({
  selector: 'app-edituserbox',
  standalone:true,
  imports: [CommonModule,MatFormFieldModule,ReactiveFormsModule,HttpClientModule,MatFormFieldModule,MatFormField,MatInputModule,MatButtonModule],
  templateUrl: './edituserbox.component.html',
  styleUrl: './edituserbox.component.css',
})
export class EdituserboxComponent {

  userForm!:FormGroup;
  constructor(
    public dialogRef: MatDialogRef<EdituserboxComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private fb: FormBuilder,
    private http: HttpClient
  ) {
    this.userForm = this.fb.group({
      email: [{ value: data.email, disabled: true }],
      password: [data.password, [Validators.required, Validators.minLength(6)]],
    });
  }
  onSubmit(): void {
    if (this.userForm.valid) {
      const updatedUser = { email: this.data.email, ...this.userForm.value };
      this.http.put(`https://localhost:7033/api/Login/update/${this.data.email}`, updatedUser).subscribe(response => {
        console.log('User updated:', response);
        this.dialogRef.close(true);
      });
    }
  }
  onCancel(): void {
    this.dialogRef.close();
  }

}


HTML -->

<h2 mat-dialog-title>Edit User</h2>
<form [formGroup]="userForm" (ngSubmit)="onSubmit()">
  <mat-form-field class="full-width" appearance="fill">
    <mat-label>Email</mat-label>
    <input matInput formControlName="email" />
  </mat-form-field>

  <mat-form-field class="full-width" appearance="fill">
    <mat-label>Password</mat-label>
    <input matInput type="password" formControlName="password" />
    <mat-error *ngIf="userForm.get('password')?.hasError('required')">Password is required.</mat-error>
    <mat-error *ngIf="userForm.get('password')?.hasError('minlength')">
      Password must be at least 6 characters.
    </mat-error>
  </mat-form-field>

  <div class="dialog-actions">
    <button mat-button type="button" (click)="onCancel()">Cancel</button>
    <button mat-raised-button color="primary" type="submit" [disabled]="userForm.invalid">Save</button>
  </div>
</form>


CSS-->
form {
    display: flex;
    flex-direction: column;
    gap: 16px;
    padding: 20px;
  }
h2{
    text-align: center;
}
  .full-width {
    width: 100%;
  }

  .dialog-actions {
    display: flex;
    justify-content: space-between;
    padding-top: 12px;
  }

  button {
    padding: 8px 16px;
    font-size: 14px;
  }
  
  
Recipe grid .ts -->

import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { HttpClientModule } from '@angular/common/http';
import { Component, OnInit, ViewChild } from '@angular/core';
import {MatGridListModule} from '@angular/material/grid-list'
import { FilterpipeComponent } from '../../Pipes/filterpipe/filterpipe.component';
import { FormsModule } from '@angular/forms';
import { MatFormField, MatLabel } from '@angular/material/form-field';
import {MatPaginator, MatPaginatorModule, PageEvent} from '@angular/material/paginator'
import{MatMenuModule} from '@angular/material/menu'
import { MatButtonModule } from '@angular/material/button';
import{MatAutocompleteModule} from '@angular/material/autocomplete'
import {MatHeaderCellDef, MatTableModule} from '@angular/material/table'
import { MatIcon } from '@angular/material/icon';
import { MatDialog } from '@angular/material/dialog';
import { EditrecipeboxComponent } from '../../EditComponents/editrecipebox/editrecipebox.component';
@Component({
  selector: 'app-grid',
  standalone:true,
  imports: [MatGridListModule,
    CommonModule,
    FormsModule,
    HttpClientModule,
    MatPaginator,
    MatIcon,
    MatMenuModule,
    MatButtonModule,
    MatAutocompleteModule,
  MatTableModule],
  templateUrl: './grid.component.html',
  styleUrl: './grid.component.css'
})
export class GridComponent implements OnInit {

  searchTerm:string='';
  id:number=0;
  recipes:any[]=[];
  pageSize:number=10;
  pageIndex:number=0;
  paginatedData:any[]=[];
  filteredRecipes:any[]=[];
  
  displayedColumns: string[] = ['id', 'name', 'ingredients','rating','reviewCount','mealType', 'actions'];

  @ViewChild(MatPaginator) paginator!:MatPaginator;

  constructor(private http:HttpClient,private dialog:MatDialog){}

  //Lifecycle method to initialize
  ngOnInit(): void {
    this.http.get('https://localhost:7033/api/Recipes/recipes').subscribe((res:any)=>{
      this.recipes=res;
      this.filteredRecipes=this.recipes;
      this.updatePaginatedData();
    })
  }


  onPageChange(event: PageEvent): void {
    this.pageSize = event.pageSize;
    this.pageIndex = event.pageIndex;
    this.updatePaginatedData();
  }
  
  refreshData() {
    console.log('Refreshing data...');
    this.filteredRecipes = []; 
    this.paginatedData = this.filteredRecipes.slice(0, this.pageSize);
  }

  //function for updating pagination setting (values)
  updatePaginatedData(){
    const filteredData=this.filteredRecipesList();
    const startIndex=this.pageIndex*this.pageSize;
    const endINdex=startIndex+this.pageSize;
    this.paginatedData=this.filteredRecipesList().slice(startIndex,endINdex);
  }

  //returns list after applying filter based on search
  filteredRecipesList() :any[]{
    return this.filteredRecipes.filter(recipe =>
      recipe.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
      recipe.ingredients.some((ingredient: string) => ingredient.toLowerCase().includes(this.searchTerm.toLowerCase()))
    );
  }

   // Open dialog for editing recipe
   editRecipe(recipe: any) {
    const dialogRef = this.dialog.open(EditrecipeboxComponent, {
      width: '400px',
      data: recipe
    });

    dialogRef.afterClosed().subscribe(updatedRecipe => {
      if (updatedRecipe) {
        this.http.put(`https://localhost:7033/api/Recipes/update_recipes/${updatedRecipe.id}`, updatedRecipe)
          .subscribe(response => {
            console.log('Recipe updated:', response);
            this.refreshData();
          });
      }
    });
  }

  //delete a recipe
  deleteRecipe(recipe:any){
    console.log('Deleting recipe',recipe);
    this.http.delete(`https://localhost:7033/api/Recipes/delete_recipes/${recipe.id}`)
      .subscribe(response => {
        console.log('Recipe deleted:', response);
        this.recipes = this.recipes.filter(r => r !== recipe);
        this.filteredRecipes = this.recipes;
        this.updatePaginatedData();
      });
  }

}


HTML-->
<div class="search-container">
    <!-- Search input for filtering the recipes -->
    <input type="text" matInput [(ngModel)]="searchTerm" [matAutocomplete]="auto" placeholder="Search..." class="search-bar"/>
    <mat-autocomplete #auto="matAutocomplete">
        <mat-option *ngFor="let recipe of filteredRecipesList()" [value]="recipe.name">
          {{ recipe.name }}
        </mat-option>
      </mat-autocomplete>
</div>
  
  
    <!-- Container for Menu and Refresh Icon -->
    <div class="header-actions">
      <!-- Menu Icon -->
      <button mat-icon-button [matMenuTriggerFor]="topMenu">
        <mat-icon>more_vert</mat-icon>
      </button>
  
      <!-- Menu with Refresh and other options -->
      <mat-menu #topMenu="matMenu">
        <button mat-menu-item (click)="refreshData()">
          <mat-icon>refresh</mat-icon> Refresh
        </button>
       
      </mat-menu>
  
      <!-- Refresh Icon -->
      <button mat-icon-button (click)="refreshData()">
        <mat-icon>refresh</mat-icon>
      </button>
    </div>
    <div class="grid-container">
    <table class="grid-table">
      <thead>
        <tr>
          <th>Id</th>
          <th>Recipe Name</th>
          <th>Ingredients</th>
          <th>Rating</th>
          <th>Review Count</th>
          <th>Meal Type</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Display filtered recipes with pagination -->
        <tr *ngFor="let recipe of paginatedData">
          <td>{{ recipe.id }}</td>
          <td>{{ recipe.name }}</td>
          <td>{{ recipe.ingredients.join(', ') }}</td>
          <td>{{ recipe.rating }}</td>
          <td>{{ recipe.reviewCount }}</td>
          <td>{{ recipe.mealType.join(', ') }}</td>
          <td>
            <!-- Action Button with Vertical Dots (More Options) -->
            <button mat-icon-button [matMenuTriggerFor]="menu">
              <mat-icon>more_vert</mat-icon>
            </button>
  
            <!-- Menu for Edit and Delete -->
            <mat-menu #menu="matMenu">
              <button mat-menu-item (click)="editRecipe(recipe)" class="action-btn">
                <mat-icon>edit</mat-icon> Edit
              </button>
              <button mat-menu-item (click)="deleteRecipe(recipe)" class="action-btn">
                <mat-icon>delete</mat-icon> Delete
              </button>
            </mat-menu>
          </td>
        </tr>
      </tbody>
      <tfoot>
        <!-- Footer row with paginator -->
        <tr>
          <td colspan="7">
            <!-- The paginator now spans across all 4 columns of the table -->
            <mat-paginator [length]="filteredRecipes.length"
                           [pageSize]="pageSize"
                           [pageSizeOptions]="[5, 10, 25, 100]"
                           (page)="onPageChange($event)"
                           aria-label="Select page">
            </mat-paginator>
          </td>
        </tr>
      </tfoot>
    </table>
  </div>

  
  CSS-->
  /* Styling for the header actions container (Menu and Refresh icon) */
.header-actions {
    display: flex;
    justify-content: flex-end;
    position: relative;
    margin-right: 21vmin;
  }
  
  /* Optional: Add some spacing between the Menu and Refresh icon */
  .header-actions button {
    margin-left: 10px;
  }
  
  /* Styling for search input and grid container */
  .search-container {
    display: flex;
    justify-content: center;
    margin-top: 3vmin;
    margin-bottom: 20px;
  }
  
  .search-bar {
    width: 50%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    font-size: 16px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3);
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }
  
  .grid-container {
    display: flex;
    justify-content: center;
    align-items: center;
      
  }
  
  .grid-table {
   
    width: 80%;
    border-collapse: collapse;
    text-align: left;
    margin-bottom: 5vmin;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.4);
  }
  
  .grid-table th,
  .grid-table td {
    padding: 10px;
    border: 1px solid #ddd;
    
  }
  
  .grid-table th {
    /* background-color: #f4f4f4; */
    background-color: #fca311;
  }
  
  .grid-table tr:hover {
    background-color: #f1f1f1;
  }
  
  /* Action buttons for Edit/Delete */
  .action-btn {
    padding: 10px 10px;
    margin: 2px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
  }
  
  .action-btn:first-child {
    color: black;
  }
  
  .action-btn:last-child {
    color: black;
  }
  
  /* Paginator Section */
  tfoot {
    width: 100px;
  }
  mat-paginator{
    background-color: white;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }
  
  @media (max-width: 768px) {
    .grid-table td {
      display: block;
      width: 100%;
    }
  
    .action-btn {
      width: 100%;
      margin: 5px 0;
    }
  }
  
  
  
  EditrecipeboxComponent -->
  
  import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Component, Inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { MatFormField } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';

@Component({
  selector: 'app-editrecipebox',
  imports: [CommonModule,FormsModule,MatDialogModule,MatButtonModule,MatFormField,MatInputModule,HttpClientModule],
  templateUrl: './editrecipebox.component.html',
  styleUrl: './editrecipebox.component.css'
})
export class EditrecipeboxComponent {

  constructor(
    @Inject(MAT_DIALOG_DATA) public data: any,
    private dialogRef: MatDialogRef<EditrecipeboxComponent>,
    private http: HttpClient
  ) {}

  onSave(): void {
    this.http.put(`https://localhost:7033/api/Recipes/update_recipes/${this.data.id}`, this.data).subscribe({
      next: () => {
        alert('Recipe successfully updated!');
        this.dialogRef.close(this.data);
      },
      error: (err) => {
        console.error('Failed to save recipe:', err);
        alert('Failed to update recipe. Please try again.');
      }
    });
  }

  onCancel(): void {
    this.dialogRef.close();
  }
  // Refresh grid data on dialog close
  ngOnDestroy(): void {
    this.dialogRef.afterClosed().subscribe(() => {
      window.location.reload(); // Reloading to update the frontend with backend changes
    });
  }
}


HTML -->

<h2 mat-dialog-title>Edit Recipe</h2>
    <mat-dialog-content>
      <mat-form-field>
        <mat-label>ID</mat-label>
        <input matInput [(ngModel)]="data.id" disabled>
      </mat-form-field>
      <mat-form-field>
        <mat-label>Recipe Name</mat-label>
        <input matInput [(ngModel)]="data.name">
      </mat-form-field>
      <mat-form-field>
        <mat-label>Ingredients</mat-label>
        <input matInput [(ngModel)]="data.ingredients">
      </mat-form-field>
      <mat-form-field>
        <mat-label>Rating</mat-label>
        <input matInput type="number" [(ngModel)]="data.rating">
      </mat-form-field>
      <mat-form-field>
        <mat-label>Review Count</mat-label>
        <input matInput type="number" [(ngModel)]="data.reviewCount">
      </mat-form-field>
      <mat-form-field>
        <mat-label>Meal Type</mat-label>
        <input matInput [(ngModel)]="data.mealType">
      </mat-form-field>
    </mat-dialog-content>
    <mat-dialog-actions>
      <button mat-button (click)="onCancel()">Cancel</button>
      <button mat-button (click)="onSave()" cdkFocusInitial>Save</button>
    </mat-dialog-actions>

