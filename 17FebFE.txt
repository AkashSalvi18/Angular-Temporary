import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Component, Inject } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';

@Component({
  selector: 'app-edituserbox',
  imports: [CommonModule, MatFormFieldModule, ReactiveFormsModule, HttpClientModule, MatInputModule, MatButtonModule],
  templateUrl: './edituserbox.component.html',
  styleUrl: './edituserbox.component.css'
})
export class EdituserboxComponent {
  userForm!: FormGroup;

  constructor(
    public dialogRef: MatDialogRef<EdituserboxComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private fb: FormBuilder,
    private http: HttpClient
  ) {
    this.userForm = this.fb.group({
      email: [{ value: data.email, disabled: true }],
      password: [data.password, [Validators.required, Validators.minLength(6)]]
    });
  }

  onSubmit(): void {
    if (this.userForm.valid) {
      const updatedUser = {
        email: this.data.email,
        password: this.userForm.value.password
      };

      this.http.put(`https://localhost:7033/api/Login/update/${this.data.id}`, updatedUser).subscribe({
        next: () => {
          alert('User updated successfully!');
          this.dialogRef.close(true);
        },
        error: (error) => {
          console.error('Update failed:', error);
          alert(`Update failed: ${error.status} - ${error.statusText}`);
        }
      });
    }
  }

  onCancel(): void {
    this.dialogRef.close();
  }

  ngOnDestroy(): void {
    this.dialogRef.afterClosed().subscribe(() => {
      window.location.reload();
    });
  }
}


HTML-->

<h2 mat-dialog-title>Edit User</h2>
<form [formGroup]="userForm" (ngSubmit)="onSubmit()">
  <mat-form-field class="full-width" appearance="fill">
    <mat-label>Email</mat-label>
    <input matInput formControlName="email" />
  </mat-form-field>

  <mat-form-field class="full-width" appearance="fill">
    <mat-label>Password</mat-label>
    <input matInput type="password" formControlName="password" />
    <mat-error *ngIf="userForm.get('password')?.hasError('required')">Password is required.</mat-error>
    <mat-error *ngIf="userForm.get('password')?.hasError('minlength')">
      Password must be at least 6 characters.
    </mat-error>
  </mat-form-field>

  <div class="dialog-actions">
    <button mat-button type="button" (click)="onCancel()">Cancel</button>
    <button mat-raised-button color="primary" type="submit" [disabled]="userForm.invalid">Save</button>
  </div>
</form>



Signup-->
<div class="signup-container">
  <mat-card class="signup-card">
    <mat-card-header>
      <mat-card-title>Sign Up</mat-card-title>
    </mat-card-header>

    <mat-card-content>
      <form [formGroup]="signupForm" (ngSubmit)="onSubmit()" class="signup-form">
        <!-- Email -->
        <mat-form-field appearance="fill" class="form-field">
          <mat-label>Email</mat-label>
          <input matInput formControlName="email" required />
          <mat-error *ngIf="email?.hasError('required')">Email is required</mat-error>
          <mat-error *ngIf="email?.hasError('email')">Invalid email format</mat-error>
        </mat-form-field>

        <!-- First Name -->
        <mat-form-field appearance="fill" class="form-field">
          <mat-label>First Name</mat-label>
          <input matInput formControlName="fname" required />
          <mat-error *ngIf="fname?.hasError('required')">First Name is required</mat-error>
        </mat-form-field>

        <!-- Last Name -->
        <mat-form-field appearance="fill" class="form-field">
          <mat-label>Last Name</mat-label>
          <input matInput formControlName="lname" required />
          <mat-error *ngIf="lname?.hasError('required')">Last Name is required</mat-error>
        </mat-form-field>

        <!-- Phone Number -->
        <mat-form-field appearance="fill" class="form-field">
          <mat-label>Phone Number</mat-label>
          <input matInput formControlName="phoneNumber" required />
          <mat-error *ngIf="phoneNumber?.hasError('required')">Phone number is required</mat-error>
        </mat-form-field>

        <!-- Address -->
        <mat-form-field appearance="fill" class="form-field">
          <mat-label>Address</mat-label>
          <input matInput formControlName="address" required />
          <mat-error *ngIf="address?.hasError('required')">Address is required</mat-error>
        </mat-form-field>

        <!-- Password -->
        <mat-form-field appearance="fill" class="form-field">
          <mat-label>Password</mat-label>
          <input matInput formControlName="password" type="password" required />
          <mat-error *ngIf="password?.hasError('required')">Password is required</mat-error>
          <mat-error *ngIf="password?.hasError('minlength')">Password must be at least 6 characters</mat-error>
        </mat-form-field>

        <!-- Confirm Password -->
        <mat-form-field appearance="fill" class="form-field">
          <mat-label>Confirm Password</mat-label>
          <input matInput formControlName="confirmPassword" type="password" required />
          <mat-error *ngIf="confirmPassword?.hasError('required')">Confirm Password is required</mat-error>
        </mat-form-field>

        <!-- Submit Button -->
        <div class="button-container">
          <button mat-raised-button color="primary" type="submit" [disabled]="!signupForm.valid">
            Sign Up
          </button>
        </div>
      </form>
    </mat-card-content>
  </mat-card>
</div>


TS-->
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormControl, ReactiveFormsModule } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Router } from '@angular/router';
import { catchError, of } from 'rxjs';
import { MatCard, MatCardContent, MatCardHeader, MatCardTitle } from '@angular/material/card';
import { MatError, MatFormField, MatLabel } from '@angular/material/form-field';
import { MatInput } from '@angular/material/input';
import { MatButton } from '@angular/material/button';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-signup',
  standalone:true,
  imports:[MatCard,MatFormField,MatInput,MatButton,ReactiveFormsModule,MatLabel,MatError,MatCardContent,MatCardTitle,MatCardHeader,HttpClientModule,CommonModule],
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.css']
})
export class SignupComponent {
  signupForm: FormGroup;

  constructor(private fb: FormBuilder, private router: Router, private http: HttpClient) {
    this.signupForm = this.fb.group(
      {
        email: ['', [Validators.required, Validators.email]],
        fname: ['', [Validators.required]],
        lname: ['', [Validators.required]],
        phoneNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]], // Assuming a 10-digit phone number
        address: ['', [Validators.required]],
        password: ['', [Validators.required, Validators.minLength(6)]],
        confirmPassword: ['', [Validators.required]],
      },
      {
        validators: this.passwordMatchValidator
      }
    );
  }

  // Password match validator
  passwordMatchValidator(formGroup: FormGroup): { [key: string]: boolean } | null {
    const password = formGroup.get('password')?.value;
    const confirmPassword = formGroup.get('confirmPassword')?.value;
    return password && confirmPassword && password !== confirmPassword ? { passwordMismatch: true } : null;
  }

  // Handle form submission
  onSubmit() {
    if (this.signupForm.valid) {
      const signupData = this.signupForm.value;

      this.http.post('https://localhost:7033/api/Login/signup', signupData)
        .pipe(
          catchError(error => {
            console.error('Error during signup:', error);
            alert('Something went wrong during signup. Please try again.');
            return of(null); // Return an empty observable to prevent breaking the flow
          })
        )
        .subscribe(response => {
          if (response) {
            console.log('Signup successful:', response);
            // Redirect to login page on successful signup
            this.router.navigate(['/login']);
          }
        });
    } else {
      console.log('Form is not valid or passwords do not match');
    }
  }

  get email(): FormControl {
    return this.signupForm.get('email') as FormControl;
  }

  get fname(): FormControl {
    return this.signupForm.get('fname') as FormControl;
  }

  get lname(): FormControl {
    return this.signupForm.get('lname') as FormControl;
  }

  get phoneNumber(): FormControl {
    return this.signupForm.get('phoneNumber') as FormControl;
  }

  get address(): FormControl {
    return this.signupForm.get('address') as FormControl;
  }

  get password(): FormControl {
    return this.signupForm.get('password') as FormControl;
  }

  get confirmPassword(): FormControl {
    return this.signupForm.get('confirmPassword') as FormControl;
  }
}
